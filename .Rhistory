"Presque tous sont d'origine immigrée" = "1",
"Plus de la moitié est d'origine immigrée" = "2",
"La moitié est d'origine immigrée" = "3",
"Moins de la moitié est d'origine immigrée" = "4",
"Presque pas ou aucun n'est d'origine immigrée" = "5",
"Refus ou ne sait pas" = "8",
"Refus ou ne sait pas" = "9"
)
## Recodage de indiv$origine_tous_g2 en indiv$origine_tous_g2_rec
indiv$origine_tous_g2_rec <- as.character(indiv$origine_tous_g2)
indiv$origine_tous_g2_rec <- fct_recode(indiv$origine_tous_g2_rec,
"Sans ascendance direct" = "0",
"Autres français né hors de France métro" = "10",
"Descendants de français né hors de France métro" = "11",
"Originaires d'Outre-mer" = "20",
"Descendants d'originaire(s) d'Outre-mer" = "22",
"Immigrés d'Algérie" = "30",
"Descendants d'immigrés(s) originaires d'Algérie" = "33",
"Immigrés du Maroc/Tunisie" = "40",
"Descendants d'immigré(s) originaires du Maroc/Tunisie" = "44",
"Immigrés d'Afrique sahelienne" = "50",
"Descendants d'immigré(s) originaires d'Afrique sahélienne" = "55",
"Immigrés d'Afrique guinéenne/centrale" = "60",
"Descendants d'immigré(s) originaires d'Afrique guinéenne/centrale" = "66",
"Immigrés d'autres pays d'Afrique" = "70",
"Descendants d'immigré(s) originaires d'autres pays d'Afrique" = "77",
"Immigrés d'Asie du Sud-Est" = "80",
"Descendants d'immigré(s) originaires d'Asie du Sud-Est" = "88",
"Immigrés de Turquie/Moyen-Orient" = "90",
"Descendants d'immigré(s) originaires de Turquie/Moyen-Orient" = "99",
"Immigrés de Chine" = "100",
"Immigrés d'autres pays d'Asie" = "110",
"Descendants d'immigré(s) originaires d'autres pays d'Asie" = "111",
"Immigrés du Portugal" = "120",
"Descendants d'immigré(s) originaires du Portugal" = "121",
"Immigrés d'Espagne/Italie" = "130",
"Descendants d'immigré(s) originaires d'Espagne/Italie" = "131",
"Immigrés d'autres pays de l'UE27" = "140",
"Descendants d'immigré(s) originaires d'autres pays de l'UE27" = "141",
"Immigrés d'autres pays d'Europe" = "150",
"Descendants d'immigré(s) originaires d'autres pays d'Europe" = "151",
"Immigrés d'autres pays" = "160",
"Descendants d'immigré(s) originaires d'autres pays" = "161"
)
## Recodage de indiv$origine_tous_g2 en indiv$origine_tous_g2_class
indiv$origine_tous_g2_class <- as.character(indiv$origine_tous_g2)
indiv$origine_tous_g2_class <- fct_recode(indiv$origine_tous_g2_class,
"Sans ascendance direct" = "0",
"G1 français né hors de France métro" = "10",
"G2 français né hors de France métro" = "11",
"G1 d'Outre-mer" = "20",
"G2 d'Outre-mer" = "22",
"G1 Maghreb" = "30",
"G2 Maghreb" = "33",
"G1 Maghreb" = "40",
"G2 Maghreb" = "44",
"G1 Sahel" = "50",
"G2 Sahel" = "55",
"G1 Guinée" = "60",
"G2 Guinée" = "66",
"G1 Afrique" = "70",
"G2 Afrique" = "77",
"G1 Asie" = "80",
"G2 Asie" = "88",
"G1 Turquie/Moyen-Orient" = "90",
"G2 Turquie/Moyen-Orient" = "99",
"G1 Chine" = "100",
"G1 Asie" = "110",
"G2 Asie" = "111",
"G1 Europe" = "120",
"G2 Europe" = "121",
"G1 Europe" = "130",
"G2 Europe" = "131",
"G1 Europe" = "140",
"G2 Europe" = "141",
"G1 Europe" = "150",
"G2 Europe" = "151",
"G1 Autre" = "160",
"G2 Autre" = "161"
)
## Recodage de indiv$origine_tous_g2 en indiv$origine_tous_g2_cont
indiv$origine_tous_g2_cont <- as.character(indiv$origine_tous_g2)
indiv$origine_tous_g2_cont <- fct_recode(indiv$origine_tous_g2_cont,
"Sans ascendance direct" = "0",
"G1 français né hors de France métro" = "10",
"G2 français né hors de France métro" = "11",
"G1 d'Outre-mer" = "20",
"G2 d'Outre-mer" = "22",
"G1 Afrique" = "30",
"G2 Afrique" = "33",
"G1 Afrique" = "40",
"G2 Afrique" = "44",
"G1 Afrique" = "50",
"G2 Afrique" = "55",
"G1 Afrique" = "60",
"G2 Afrique" = "66",
"G1 Afrique" = "70",
"G2 Afrique" = "77",
"G1 Asie" = "80",
"G2 Asie" = "88",
"G1 Asie" = "90",
"G2 Asie" = "99",
"G1 Asie" = "100",
"G1 Asie" = "110",
"G2 Asie" = "111",
"G1 Europe" = "120",
"G2 Europe" = "121",
"G1 Europe" = "130",
"G2 Europe" = "131",
"G1 Europe" = "140",
"G2 Europe" = "141",
"G1 Europe" = "150",
"G2 Europe" = "151",
"G1 Autre" = "160",
"G2 Autre" = "161"
)
## Recodage de indiv$origine_tous_g2 en indiv$origine_tous_g2_corrupt
indiv$origine_tous_g2_corrupt <- as.character(indiv$origine_tous_g2)
indiv$origine_tous_g2_corrupt <- fct_recode(indiv$origine_tous_g2_corrupt,
"Sans ascendance direct" = "0",
"Autres français né hors de France métro" = "10",
"Descendants de français né hors de France métro" = "11",
"Originaires d'Outre-mer" = "20",
"Descendants d'originaire(s) d'Outre-mer" = "22",
"Immigrés d'Algerie" = "30",
"Descendants d'immigré(s) originaires d'Algérie" = "33",
"Immigrés du Maroc/Tunisie" = "40",
"Descendants d'immigré(s) originaires du Maroc/Tunisie" = "44",
"Immigrés d'Afrique sahélienne" = "50",
"Descendants d'immigré(s) originaires d'Afrique sahélienne" = "55",
"Immigrés d'Afrique guinéenne/centrale" = "60",
"Descendants d'immigré(s) originaires d'Afrique guinéenne/centrale" = "66",
"Immigrés d'autres pays d'Afrique" = "70",
"Descendants d'immigré(s) originaires d'autres pays d'Afrique" = "77",
"Immigrés d'Asie du Sud-Est" = "80",
"Descendants d'immigré(s) originaires d'Asie du Sud-Est" = "88",
"Immigrés de Turquie/Moyen-Orient" = "90",
"Descendants d'immigré(s) originaires de Turquie/Moyen-Orient" = "99",
"Immigrés de Chine" = "100",
"Immigrés d'autres pays d'Asie" = "110",
"Descendants d'immigré(s) originaires d'autres pays d'Asie" = "111",
"Immigrés du Portugal" = "120",
"Descendants d'immigré(s) originaires du Portugal" = "121",
"Immigrés d'Espagne/Italie" = "130",
"Descendants d'immigré(s) originaires d'Espagne/Italie" = "131",
"Immigrés d'autres pays de l'UE27" = "140",
"Descendants d'immigré(s) originaires d'autres pays de l'UE27" = "141",
"Immigrés d'autres pays d'Europe" = "150",
"Descendants d'immigré(s) originaires d'autres pays d'Europe" = "151",
"Immigrés d'autres pays" = "160",
"Descendants d'immigré(s) originaires d'autres pays" = "161"
)
##############################################Recodage de lecture
indiv$group1_code <- as.character(indiv$group1)
indiv$group1_code <- fct_recode(indiv$group1_code,
"G1_I" = "1",
"G1_OM" = "2",
"G2_I" = "3",
"G2_OM" = "4",
"Autre" = "5"
)
## Recodage de indiv$l_immi en indiv$l_immi_rec
indiv$l_immi_code <- as.character(indiv$l_immi)
indiv$l_immi_code <- fct_recode(indiv$l_immi_code,
"Tous" = "1",
"sup 50%" = "2",
"eq 50%" = "3",
"inf 50%" = "4",
"Aucun" = "5",
"null" = "8",
"null" = "9")
## Recodage de indiv$l_immi en indiv$l_immi_rec
indiv$a_rquart_code <- as.character(indiv$a_rquart)
indiv$a_rquart_code <- fct_recode(indiv$a_rquart_code,
"Tous" = "1",
"sup 50%" = "2",
"eq 50%" = "3",
"inf 50%" = "4",
"Aucun" = "5",
"null" = "8",
"null" = "9")
#Faisons de i_controla et i_controlb une seule est même variable :
## A : Ils vous ont expliqué ce qu'ils faisaient et pourquoi
indiv <- indiv %>%
mutate(d_lieudisagr_d_rec = case_when(d_lieudisagr_d == 1 ~ "Discrimination lors d'un contrôle de police",
d_lieudisagr_flag == 0 ~ "Pas d'expérience de discrimination",
d_lieudisagr_flag == -1 | d_lieudisagr_flag == -2 ~ NA_character_,
TRUE ~ "Discrimination autre que police"))
indiv$d_lieudisagr_d_rec <- as.factor(indiv$d_lieudisagr_d_rec)
indiv <- indiv %>%
mutate(i_control_rec_a = case_when(i_controla_a == 1 | i_controlb_d==1 ~ "Ils vous ont expliqué ce qu'ils faisaient et pourquoi",
i_controla_flag == 0 ~ "Question non posée (filtre)",
i_controla_flag == -1 | i_controla_flag == -2 ~ "Refus ou ne sait pas",
TRUE ~ "Ils ne vous ont rien expliqué"))
indiv$i_control_rec_a <- as.factor(indiv$i_control_rec_a)
res = rep(0,dimension[1])
res[which(indiv$i_controla_a == 1 | indiv$i_controlb_d == 1)] = 1
indiv["i_control_rec_a"] = res
## B : Ils ont été polis
res = rep(0,dimension[1])
res[which(indiv$i_controla_f == 1 | indiv$i_controlb_b == 1)] = 1
indiv["i_control_rec_b"] = res
## C : Ils vous ont tutoyé
res = rep(0,dimension[1])
res[which(indiv$i_controla_c == 1 | indiv$i_controlb_a == 1)] = 1
indiv["i_control_rec_c"] = res
## D : Ils ont fouillé vos vêtements et vos sacs
res = rep(0,dimension[1])
res[which(indiv$i_controla_b == 1 | indiv$i_controlb_c == 1)] = 1
indiv["i_control_rec_d"] = res
## E : Ils vous ont provoqué, insulté
res = rep(0,dimension[1])
res[which(indiv$i_controla_d == 1 | indiv$i_controlb_e == 1)] = 1
indiv["i_control_rec_e"] = res
## F : Ils ont été brutaux
res = rep(0,dimension[1])
res[which(indiv$i_controla_e == 1 | indiv$i_controlb_f == 1)] = 1
indiv["i_control_rec_f"] = res
## G : Rien de tout cela
res = rep(0,dimension[1])
res[which(indiv$i_controla_g == 1 | indiv$i_controlb_g == 1)] = 1
indiv["i_control_rec_g"] = res
## H : Refus ou ne sait pas
res = rep(0,dimension[1])
res[which(indiv$i_controla_flag == 1 | indiv$i_controlb_flag == 1)] = 1
indiv["i_control_rec_flag"] = res
indiv <- indiv %>%
mutate(compor_discri = case_when(i_controla_a == 0 |i_controlb_d == 0|i_controla_f ==0|i_controlb_b == 0 ~ "Discrimination dans le comportement de la police par le négatif",
i_controla_b == 1 | i_controla_c ==1 | i_controla_d == 1 | i_controla_e ==1 | i_controlb_a ==1 | i_controlb_c == 1 | i_controlb_e ==1 | i_controlb_f==1 ~ "Discrimination dans le comportement de la police par le positif",
i_controlagr_flag %in% c(-1, -2) ~ "Refus ou ne sait pas",
i_controlagr_flag == 0 ~ "Pas de contrôle de police",
TRUE ~ "Pas de comportement discriminatoire lors du dernier contrôle"))
indiv_pd <- svydesign(ids = indiv$ident, data = indiv, weights = indiv$poidsi)
}
if (!exists("indiv")) {
#indiv <- read_sas("C:/Users/Utilisateur/Documents/GitHub/Police_immigration/TeO2/SAS/indiv.sas7bdat",  catalog_file = "C:/Users/Utilisateur/Documents/GitHub/Police_immigration/TeO2/Doc/formats.sas7bcat")# ça c'est mon chemin, soit tu organises ton truc de la même manière comme ça ça marche pour nous deux soit il faut que tu fasses une autre commande
indiv <- read_sas("C:/Users/3e3gr/OneDrive/Documents/ENSAE/3A-S2/PDSSS2/database en sas/TeO2/SAS/indiv.sas7bdat")
indiv <- to_factor(indiv)
}
indiv$a_rquart
indiv$d_lieudisagr_d
indiv$compor_discri
unique(indiv$compor_discri)
unique(indiv$d_lieudisagr_d_rec)
indiv$d_lieudisagr_d_rec
indiv$d_lieudisagr_d_rec == NA
indiv$d_lieudisagr_d_rec[208]
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
indiv <- indiv %>% drop_na(d_lieudisagr_d_rec)
indiv$d_lieudisagr_d_rec
unique(indiv$d_lieudisagr_d_rec)
unique(indiv$a_rquart)
indiv$durar
indiv$durar2
indiv$durar2 == NA
is.na(indiv$durar2)
#On s'occupe des durar
durar = indiv$durar2
age = indiv$agenq
index_na = is.na(durar)
durar[index_na] = age[index_na]
durar[index_na]
age[index_na]
durar
indiv["durar2"] = durar
indiv <- dummy_cols(indiv, select_columns = c("origine_tous_g2_class","group1_code","compor_discri","d_lieudisagr_d_rec"))
knitr::opts_chunk$set(echo = TRUE)
library(haven)
library(tidyr)
library(tidyverse)
library(dplyr)
library(labelled)
library(survey)
library(arrow)
library(ggplot2)
library(questionr)
library(rpart)
library(rpart.plot)
library(forcats)
library(randomForest)
library(fastDummies)
source("Base.R")
#Définition de la variable-cible : avoir au moins plutot confiance en la police
indiv["i_cnfpol_1"] = (indiv$i_cnfpol < 3)*1
write_parquet(indiv,'C:/Users/3e3gr/OneDrive/Bureau/indiv.parquet')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(haven)
library(tidyr)
library(tidyverse)
library(dplyr)
library(labelled)
library(survey)
library(arrow)
library(ggplot2)
library(questionr)
library(rpart)
library(rpart.plot)
library(forcats)
library(randomForest)
library(fastDummies)
source("Base.R")
#Définition de la variable-cible : avoir au moins plutot confiance en la police
indiv["i_cnfpol_1"] = (indiv$i_cnfpol < 3)*1
#Filtrage des "Refus" et autres "Ne sait pas"
indiv <- indiv %>% filter(i_cnfpol < 8 & i_contri < 8 & l_quart_secu < 8 & l_immi < 8 & a_rquart < 8)
indiv <- indiv %>% drop_na(d_lieudisagr_d_rec)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#Définition de la variable-cible : avoir au moins plutot confiance en la police
indiv["i_cnfpol_1"] = (indiv$i_cnfpol < 3)*1
#Filtrage des "Refus" et autres "Ne sait pas"
indiv <- indiv %>% filter(i_cnfpol < 8 & i_contri < 8 & l_quart_secu < 8 & l_immi < 8 & a_rquart < 8)
indiv <- indiv %>% drop_na(d_lieudisagr_d_rec)
#On s'occupe des durar
durar = indiv$durar2
age = indiv$agenq
index_na = is.na(durar)
durar[index_na] = age[index_na]
indiv["durar2"] = durar
indiv <- dummy_cols(indiv, select_columns = c("origine_tous_g2_class","group1_code","compor_discri","d_lieudisagr_d_rec"))
#Filtrage des "Refus" et autres "Ne sait pas"
indiv <- indiv %>% filter(i_cnfpol < 8 & i_contri < 8 & l_quart_secu < 8 & l_immi < 8 & a_rquart < 8)
indiv <- indiv %>% drop_na(d_lieudisagr_d_rec)
indiv_doi = indiv
poids <- indiv_doi$poidsi
dataX = indiv_doi %>% select(-one_of("ident","origine_tous_g2_class","group1_code","poidsi","i_cnfpol_1","__index_level_0__"))
target = indiv_doi$i_cnfpol_1
rF=randomForest(x=dataX,y=target,ntree=1000,weights=indiv_doi$poidsi,importance=TRUE)
indiv_doi = indiv %>% select(c("ident","origine_tous_g2_class","i_cnfpol_1","sexee","group1_code","agenq","durar2","i_contri","l_quart_secu","l_immi","qpv_i","a_rquart","poidsi","discri","d_lieudisagr_d_rec","compor_discri"))
indiv_doi <- dummy_cols(indiv_doi, select_columns = c("origine_tous_g2_class","group1_code","compor_discri","d_lieudisagr_d_rec"))
indiv_doi = indiv
dataX = indiv_doi %>% select(-one_of("ident","origine_tous_g2_class","group1_code","poidsi","i_cnfpol_1","__index_level_0__"))
target = indiv_doi$i_cnfpol_1
rF=randomForest(x=dataX,y=target,ntree=1000,weights=indiv_doi$poidsi,importance=TRUE)
dataX
indiv_doi
indiv_doi = indiv %>% select(c("ident","origine_tous_g2_class","i_cnfpol_1","sexee","group1_code","agenq","durar2","i_contri","l_quart_secu","l_immi","qpv_i","a_rquart","poidsi","discri","d_lieudisagr_d_rec","compor_discri"))
indiv_doi
indiv_doi <- dummy_cols(indiv_doi, select_columns = c("origine_tous_g2_class","group1_code","compor_discri","d_lieudisagr_d_rec"))
indiv_doi
```{r setup, include=FALSE}
dataX = indiv_doi %>% select(-one_of("ident","origine_tous_g2_class","group1_code","poidsi","i_cnfpol_1","__index_level_0__"))
dataX = indiv_doi %>% select(-one_of("ident","origine_tous_g2_class","group1_code","poidsi","i_cnfpol_1"))
target = indiv_doi$i_cnfpol_1
rF=randomForest(x=dataX,y=target,ntree=1000,weights=indiv_doi$poidsi,importance=TRUE)
pr = predict(rF,dataX)
prediction = (pr>0.74)*1
pred1 = prediction[which(target==1)]
pred0 = prediction[which(target==0)]
print(sum(prediction == target)/length(target))
print(sum(pred1 == 1)/sum(target==1))
print(sum(pred0 == 0)/sum(target==0))
#Rappel :
# type=1 -> increasing mean of accuracy
# type=2 -> increasing mean of node purity
pertinence1 = importance(rF,type=1)
pertinence2 = importance(rF,type=2)
dfp = data.frame(pertinence1,pertinence2)
listvar = rownames(dfp)[dfp["X.IncMSE"]>20 | dfp["IncNodePurity"]>50]
library(rpart)
library(rpart.plot)
fit <- rpart(target~., data = dataX, method = 'class',control = rpart.control(cp = 0.002))
rpart.plot(fit, extra = 106)
install.packages("visNetwork")
library(visNetwork)
install.packages("sparkline")
library(sparkline)
visTree(fit)
visTree(fit)
pr = predict(fit,dataX)
prediction = (pr>0.3)*1
pred1 = prediction[which(target==1)]
pred0 = prediction[which(target==0)]
print(sum(prediction == target)/length(target))
print(sum(pred1 == 1)/sum(target==1))
print(sum(pred0 == 0)/sum(target==0))
prediction = (pr>0.5)*1
pred1 = prediction[which(target==1)]
pred0 = prediction[which(target==0)]
print(sum(prediction == target)/length(target))
print(sum(pred1 == 1)/sum(target==1))
print(sum(pred0 == 0)/sum(target==0))
fitree <- rpart(target~., data = dataX, method = 'class',control = rpart.control(cp = 0.002))
rpart.plot(fit, extra = 106)
visTree(fitree)
knitr::opts_chunk$set(echo = TRUE)
pr_tree = predict(fitree,dataX)
prediction_tree = (pr_tree>0.5)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
length(prediction_tree)
length(pred_tree0)
length(pred_tree1)
target
unique(target)
length(which(target==0))
length(which(target==1))
length(target)
pr_tree
pr = predict(rF,dataX)
prediction = (pr>0.74)*1
pred1 = prediction[which(target==1)]
pred0 = prediction[which(target==0)]
print(sum(prediction == target)/length(target))
print(sum(pred1 == 1)/sum(target==1))
print(sum(pred0 == 0)/sum(target==0))
#Rappel :
# type=1 -> increasing mean of accuracy
# type=2 -> increasing mean of node purity
pertinence1 = importance(rF,type=1)
pertinence2 = importance(rF,type=2)
dfp = data.frame(pertinence1,pertinence2)
listvar = rownames(dfp)[dfp["X.IncMSE"]>20 | dfp["IncNodePurity"]>50]
listvar
fitree <- rpart(target~., data = dataX, method = 'class',control = rpart.control(cp = 0.002))
rpart.plot(fit, extra = 106)
visTree(fitree)
pr_tree = predict(fitree,dataX)
pr_tree
length(pr_tree)
pr_tree[0]
pr_tree["0"]
pr_tree$0
columns(pr_tree)
pr_tree
DataFame(pr_tree)
data.frame(pr_tree)
knitr::opts_chunk$set(echo = TRUE)
pr_tree = predict(fitree,dataX)
dpr_tree = data.frame(pr_tree)
dpr_tree
dpr_tree$X0
dpr_tree$X0 + dpr_tree$X1
prediction_tree = (pr_tree$X1>0.5)*1
prediction_tree = (dpr_tree$X1>0.5)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.74)*1
prediction_tree = (dpr_tree$X1>0.74)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.80)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.85)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.81)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.82)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.83)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.84)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.75)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.79)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.78)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
prediction_tree = (dpr_tree$X1>0.79)*1
pred_tree1 = prediction_tree[which(target==1)]
pred_tree0 = prediction_tree[which(target==0)]
print(sum(prediction_tree == target)/length(target))
print(sum(pred_tree1 == 1)/sum(target==1))
print(sum(pred_tree0 == 0)/sum(target==0))
